---
title: "Agile and scrum working"
author: "[Chris Beeley](mailto:chris.beeley1@nhs.net)"
date: 2024-08-22
date-format: "MMM D, YYYY"
knitr:
  opts_chunk: 
    eval: false
    echo: true
format:
  revealjs:
    theme: [default, ../su_presentation.scss]
    transition: none
    chalkboard:
      buttons: false
    preview-links: auto
    slide-number: false
    auto-animate: true
    footer: |
      view slides at [the-strategy-unit.github.io/data_science/presentations](the-strategy-unit.github.io/data_science/presentations)
    width: 1920
    height: 1080
editor: 
  markdown: 
    wrap: 120
---

## How did we get here?

* Waterfall approaches were used in the early days of software development
  * Requirements
  * Design
  * Development
  * Integration
  * Testing
  * Deployment
* You only move to the next stage when the first one is complete
* (although actually it turns out you kind of don't...)

## The agile manifesto

* Some of the ideas for agile floated around in the 20th century
* Shewart's Plan-Do-Study-Act cycle
* [The New New Product Development Game](https://hbr.org/1986/01/the-new-new-product-development-game)

## The agile advantage

* Feature creep
* Users ask for:
  * Everything they need
  * Everything they think they may need
  * Everything they want
  * Everything they think they may want
>[Source](https://www.dummies.com/book/business-careers-money/business/project-management/agile-project-management-for-dummies-3rd-edition-281622/)

## Zawinskiâ€™s Law 

["every program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can"]{style="font-size: 120px;"}

>[Source](https://en.wikipedia.org/wiki/Jamie_Zawinski#Zawinski's_Law)

## Using agile outside of software

* Data science is outside of software (IMHO)



